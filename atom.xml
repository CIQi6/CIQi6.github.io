<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Memetor&#39;s Blog</title>
  
  
  <link href="https://lightc.top/atom.xml" rel="self"/>
  
  <link href="https://lightc.top/"/>
  <updated>2023-12-30T13:00:17.283Z</updated>
  <id>https://lightc.top/</id>
  
  <author>
    <name>Memetor</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PIMPL</title>
    <link href="https://lightc.top/2023/12/19/PIMPL/"/>
    <id>https://lightc.top/2023/12/19/PIMPL/</id>
    <published>2023-12-19T09:00:08.000Z</published>
    <updated>2023-12-30T13:00:17.283Z</updated>
    
    
    <summary type="html">&lt;p&gt;Pimpl (Pointer to implementation) 是一种减少代码依赖和编译时间的 cpp 代码技巧。&lt;/p&gt;
&lt;p&gt;Pimpl 的思想是将可见类的实现放在一个单独的实现类中，在可见类中使用一个私有指针来访问实现类。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="https://lightc.top/tags/cpp/"/>
    
    <category term="cppIdioms" scheme="https://lightc.top/tags/cppIdioms/"/>
    
  </entry>
  
  <entry>
    <title>graph</title>
    <link href="https://lightc.top/2023/12/17/graph/"/>
    <id>https://lightc.top/2023/12/17/graph/</id>
    <published>2023-12-17T07:11:17.000Z</published>
    <updated>2023-12-17T08:19:28.855Z</updated>
    
    
    
    
    
    <category term="Algorithm" scheme="https://lightc.top/tags/Algorithm/"/>
    
    <category term="Graph" scheme="https://lightc.top/tags/Graph/"/>
    
    <category term="Graph Traversals" scheme="https://lightc.top/tags/Graph-Traversals/"/>
    
  </entry>
  
  <entry>
    <title>tree</title>
    <link href="https://lightc.top/2023/12/17/tree/"/>
    <id>https://lightc.top/2023/12/17/tree/</id>
    <published>2023-12-17T07:11:11.000Z</published>
    <updated>2023-12-17T10:37:21.012Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是树？&quot;&gt;&lt;a href=&quot;#什么是树？&quot; class=&quot;headerlink&quot; title=&quot;什么是树？&quot;&gt;&lt;/a&gt;什么是树？&lt;/h2&gt;&lt;p&gt;树的组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一组节点 (nodes)&lt;/li&gt;
&lt;li&gt;一组连接着节点的边 (edges)&lt;ul&gt;
&lt;li&gt;限制：任意两个节点只能有一条边&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="https://lightc.top/tags/Algorithm/"/>
    
    <category term="Tree" scheme="https://lightc.top/tags/Tree/"/>
    
    <category term="Tree Traversals" scheme="https://lightc.top/tags/Tree-Traversals/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://lightc.top/2023/12/09/%E6%9C%80%E5%B0%8F%E4%BA%8C%E5%88%86%E5%A0%86/"/>
    <id>https://lightc.top/2023/12/09/%E6%9C%80%E5%B0%8F%E4%BA%8C%E5%88%86%E5%A0%86/</id>
    <published>2023-12-09T12:40:31.000Z</published>
    <updated>2023-12-17T10:36:58.643Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是最小二分堆-binary-min-heap&quot;&gt;&lt;a href=&quot;#什么是最小二分堆-binary-min-heap&quot; class=&quot;headerlink&quot; title=&quot;什么是最小二分堆 (binary min-heap)&quot;&gt;&lt;/a&gt;什么是最小二分堆 (binary min-heap)&lt;/h2&gt;&lt;p&gt;堆是一颗完整的树，而且满足最小堆性质。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小堆：每个节点都小于等于子节点。&lt;/li&gt;
&lt;li&gt;完整：仅在最底层有缺失值，且所有节点尽可能靠左。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="dataStruct" scheme="https://lightc.top/tags/dataStruct/"/>
    
    <category term="Heap" scheme="https://lightc.top/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>优先队列</title>
    <link href="https://lightc.top/2023/12/09/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>https://lightc.top/2023/12/09/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</id>
    <published>2023-12-09T12:21:50.000Z</published>
    <updated>2023-12-17T10:38:48.597Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是优先队列&quot;&gt;&lt;a href=&quot;#什么是优先队列&quot; class=&quot;headerlink&quot; title=&quot;什么是优先队列&quot;&gt;&lt;/a&gt;什么是优先队列&lt;/h2&gt;&lt;p&gt;优先队列是一种用来优化处理最大值或最小值的 ADT 。使用这种结构可以给我们处理涉及最大值或最小值带来时间&amp;#x2F;空间优势。&lt;/p&gt;</summary>
    
    
    
    
    <category term="dataStruct" scheme="https://lightc.top/tags/dataStruct/"/>
    
    <category term="Priority Queue" scheme="https://lightc.top/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>copy constructor 杂谈(一)</title>
    <link href="https://lightc.top/2023/11/30/copy-constructor-%E6%9D%82%E8%B0%88-%E4%B8%80/"/>
    <id>https://lightc.top/2023/11/30/copy-constructor-%E6%9D%82%E8%B0%88-%E4%B8%80/</id>
    <published>2023-11-30T15:45:39.000Z</published>
    <updated>2023-12-17T10:38:06.136Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;copy-constructor-的杂谈&quot;&gt;&lt;a href=&quot;#copy-constructor-的杂谈&quot; class=&quot;headerlink&quot; title=&quot;copy constructor 的杂谈&quot;&gt;&lt;/a&gt;copy constructor 的杂谈&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;copy constructor 为什么第一个参数必须为引用类型？
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了减少一次内存拷贝吗？&lt;/p&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="https://lightc.top/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>git基础</title>
    <link href="https://lightc.top/2023/11/28/git%E5%9F%BA%E7%A1%80/"/>
    <id>https://lightc.top/2023/11/28/git%E5%9F%BA%E7%A1%80/</id>
    <published>2023-11-28T14:15:46.000Z</published>
    <updated>2023-12-17T10:37:56.900Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Git基础&quot;&gt;&lt;a href=&quot;#Git基础&quot; class=&quot;headerlink&quot; title=&quot;Git基础&quot;&gt;&lt;/a&gt;Git基础&lt;/h1&gt;&lt;h2 id=&quot;文档内容&quot;&gt;&lt;a href=&quot;#文档内容&quot; class=&quot;headerlink&quot; title=&quot;文档内容&quot;&gt;&lt;/a&gt;文档内容&lt;/h2&gt;&lt;p&gt;本文档是关于学习 MIT——The missing semester 。 大致内容为从 git 的底层数据模型开始，学习 git 的内部实现，继而理解 git 各种命令。包括：git 如何对文件&amp;#x2F;文件夹建模，历史快照（snapshots of history）是什么？&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://lightc.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>tmux食用指南</title>
    <link href="https://lightc.top/2023/11/19/tmux%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://lightc.top/2023/11/19/tmux%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2023-11-19T13:20:30.000Z</published>
    <updated>2023-12-17T10:37:30.797Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;tmux食用指南&quot;&gt;&lt;a href=&quot;#tmux食用指南&quot; class=&quot;headerlink&quot; title=&quot;tmux食用指南&quot;&gt;&lt;/a&gt;tmux食用指南&lt;/h1&gt;&lt;h2 id=&quot;什么是tmux&quot;&gt;&lt;a href=&quot;#什么是tmux&quot; class=&quot;headerlink&quot; title=&quot;什么是tmux&quot;&gt;&lt;/a&gt;什么是tmux&lt;/h2&gt;&lt;p&gt;tmux是终端复用(teminal multiplexper)的简称。通常一个终端只能同时执行一个命令，例如，当你输入&lt;code&gt;sleep 2000&lt;/code&gt;命令后，你必须要等终端执行完这条命令，你才能执行其他的命令。这显然十分的不便。一个解决方法是同时开多个终端。Bing！tmux就是这个原理。它可以让你实现多终端，并且在这些终端里灵活切换。&lt;/p&gt;</summary>
    
    
    
    
    <category term="tmux tool" scheme="https://lightc.top/tags/tmux-tool/"/>
    
  </entry>
  
</feed>
